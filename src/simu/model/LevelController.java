package simu.model;


import controller.IControllerForM;
import eduni.distributions.Normal;
import simu.framework.ArrivalProcess;
import simu.framework.EventList;

public class LevelController {
    private IControllerForM controller;
    private EventList eventList;

    public LevelController(IControllerForM controller, EventList eventList) {
        this.controller = controller;
        this.eventList = eventList;
    }

    public Level getLevel(String levelKey) {
        Level level = switch (levelKey) {
            case "DEBUG world" -> getDebugLevel();
            case "Draw demo" -> getDrawLevelDemo();
            case "Level 1" -> getLevel1();
            case "Level 2" -> getLevel2();
            case "Level 3" -> getLevel3();
            case "Level 4" -> getLevel4();
            case "Level 5" -> getLevel5();
            case "Level 6" -> getLevel6();
            case "Level 7" -> getLevel7();
            case "Level 8" -> getLevel8();
            case "Level 9" -> getLevel9();
            case "Level 10" -> getLevel10();
            default -> null;
        };

        controller.setToCurrentLevel(level);
        return level;
    }

    public Level getDebugLevel() {
        Level level = new Level("DEBUG world");

        level.add(new Road(eventList, "road0_-1"));
        level.add(new Road(eventList, "road2_-1"));
        level.add(new Road(eventList, "road4_-1"));
        level.add(new Road(eventList, "road6_-1"));
        level.add(new Road(eventList, "road-turn0_1"));
        level.add(new Road(eventList, "road-turn2_1"));
        level.add(new Road(eventList, "road-turn4_1"));
        level.add(new Road(eventList, "road-turn6_1"));
        level.add(new Road(eventList, "t-intersection0_3"));
        level.add(new Road(eventList, "t-intersection2_3"));
        level.add(new Road(eventList, "t-intersection4_3"));
        level.add(new Road(eventList, "t-intersection6_3"));
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk0_5"));
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk2_5"));
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk4_5"));
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk6_5"));
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "traffic-lights0_7"));
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "traffic-lights2_7"));
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "traffic-lights4_7"));
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "traffic-lights6_7"));
        level.add(new Roundabout(eventList, "roundabout-entrance0_9"));
        level.add(new Roundabout(eventList, "roundabout-entrance2_9"));
        level.add(new Roundabout(eventList, "roundabout-entrance4_9"));
        level.add(new Roundabout(eventList, "roundabout-entrance6_9"));
        level.add(new Roundabout(eventList, "roundabout0_11"));
        level.add(new Roundabout(eventList, "roundabout2_11"));
        level.add(new Roundabout(eventList, "roundabout4_11"));
        level.add(new Roundabout(eventList, "roundabout6_11"));
        level.add(new Roundabout(eventList, "roundabout-road0_13"));
        level.add(new Roundabout(eventList, "roundabout-road2_13"));
        level.add(new Roundabout(eventList, "roundabout-road4_13"));
        level.add(new Roundabout(eventList, "roundabout-road6_13"));
        level.add(new Roundabout(eventList, "roundabout-double0_15"));
        level.add(new Roundabout(eventList, "roundabout-double2_15"));
        level.add(new Roundabout(eventList, "roundabout-double4_15"));
        level.add(new Roundabout(eventList, "roundabout-double6_15"));
        level.add(new Roundabout(eventList, "roundabout-entrance0_17"));
        level.add(new Roundabout(eventList, "roundabout-entrance2_17"));
        level.add(new Roundabout(eventList, "roundabout-entrance4_17"));
        level.add(new Roundabout(eventList, "roundabout-entrance6_17"));
        level.add(new Road(eventList, "start0_19"));
        level.add(new Goal(eventList, "goal2_19"));

        controller.render(level, "road0_-1", 0, -1, "bottom");
        controller.render(level, "road2_-1", 2, -1, "left");
        controller.render(level, "road4_-1", 4, -1, "top");
        controller.render(level, "road6_-1", 6, -1, "right");
        controller.render(level, "road-turn0_1", 0, 1, "right-turn");
        controller.render(level, "road-turn2_1", 2, 1, "bottom-turn");
        controller.render(level, "road-turn4_1", 4, 1, "left-turn");
        controller.render(level, "road-turn6_1", 6, 1, "top-turn");
        controller.render(level, "t-intersection0_3", 0, 3, "t-intersection-right");
        controller.render(level, "t-intersection2_3", 2, 3, "t-intersection-bottom");
        controller.render(level, "t-intersection4_3", 4, 3, "t-intersection-left");
        controller.render(level, "t-intersection6_3", 6, 3, "t-intersection-top");
        controller.render(level, "crosswalk0_5", 0, 5, "top");
        controller.render(level, "crosswalk2_5", 2, 5, "right");
        controller.render(level, "crosswalk4_5", 4, 5, "bottom");
        controller.render(level, "crosswalk6_5", 6, 5, "left");
        controller.render(level, "traffic-lights0_7", 0, 7, "top");
        controller.render(level, "traffic-lights2_7", 2, 7, "right");
        controller.render(level, "traffic-lights4_7", 4, 7, "bottom");
        controller.render(level, "traffic-lights6_7", 6, 7, "left");
        controller.render(level, "roundabout-entrance0_9", 0, 9, "top-r-entrance");
        controller.render(level, "roundabout-entrance2_9", 2, 9, "right-r-entrance");
        controller.render(level, "roundabout-entrance4_9", 4, 9, "bottom-r-entrance");
        controller.render(level, "roundabout-entrance6_9", 6, 9, "left-r-entrance");
        controller.render(level, "roundabout0_11", 0, 11, "top");
        controller.render(level, "roundabout2_11", 2, 11, "right");
        controller.render(level, "roundabout4_11", 4, 11, "bottom");
        controller.render(level, "roundabout6_11", 6, 11, "left");
        controller.render(level, "roundabout-road0_13", 0, 13, "top-r-road");
        controller.render(level, "roundabout-road2_13", 2, 13, "right-r-road");
        controller.render(level, "roundabout-road4_13", 4, 13, "bottom-r-road");
        controller.render(level, "roundabout-road6_13", 6, 13, "left-r-road");
        controller.render(level, "roundabout-double0_15", 0, 15, "top-double");
        controller.render(level, "roundabout-double2_15", 2, 15, "right-double");
        controller.render(level, "roundabout-double4_15", 4, 15, "bottom-double");
        controller.render(level, "roundabout-double6_15", 6, 15, "left-double");
        controller.render(level, "roundabout-entrance0_17", 0, 17, "top-r-entrance");
        controller.render(level, "roundabout-entrance2_17", 2, 17, "right-r-entrance");
        controller.render(level, "roundabout-entrance4_17", 4, 17, "bottom-r-entrance");
        controller.render(level, "roundabout-entrance6_17", 6, 17, "left-r-entrance");
        controller.render(level, "start0_19", 0, 19, "start");
        controller.render(level, "goal2_19", 2, 19, "goal");

        return level;
    }

    public Level getLevel1() {
        Level level = new Level("Level 1");

        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start-1_0", -1, 0), "start-1_0");

        level.add(new Road(eventList, "road0_0"), "crosswalk1_0");
        level.add(new Crosswalk(25, 5, 30, 10, eventList, "crosswalk1_0"), "road1_1");
        level.add(new Road(eventList, "road1_1"), "traffic-lights1_2");
        level.add(new TrafficLights(30, 2, 30, 10, eventList, "traffic-lights1_2"), "road1_3");
        level.add(new Road(eventList, "road2_3"), "crosswalk3_3");
        level.add(new Road(eventList, "road1_3"), new String[]{"road1_4", "road2_3"});
        level.add(new Road(eventList, "road1_4"), "goal1_5");
        level.add(new Crosswalk(50, 5, 30, 10, eventList, "crosswalk3_3"), "road4_3");
        level.add(new Road(eventList, "road4_3"), "roundabout-road4_2");
        level.add(new Roundabout(eventList, "roundabout-road4_2"), "roundabout-road5_2");
        level.add(new Roundabout(eventList, "roundabout-road5_2"), "roundabout-road5_1");
        level.add(new Roundabout(eventList, "roundabout-road5_1"), "roundabout-road4_1");
        level.add(new Roundabout(eventList, "roundabout-road4_1"), new String[]{"roundabout-road4_2", "goal3_1"});
        level.add(new Goal(eventList, "goal3_1"));
        level.add(new Road(eventList, "start-1_0"), "road0_0");
        level.add(new Goal(eventList, "goal1_5"));

        controller.render(level, "road0_0", 0, 0, "right");
        controller.render(level, "crosswalk1_0", 1, 0, "right");
        controller.render(level, "road1_1", 1, 1, "bottom");
        controller.render(level, "traffic-lights1_2", 1, 2, "bottom");
        controller.render(level, "road2_3", 2, 3, "right");
        controller.render(level, "road1_3", 1, 3, "bottom");
        controller.render(level, "road1_4", 1, 4, "bottom");
        controller.render(level, "crosswalk3_3", 3, 3, "right");
        controller.render(level, "road4_3", 4, 3, "right");
        controller.render(level, "roundabout-road4_2", 4, 2, "right-r-road");
        controller.render(level, "roundabout-road5_2", 5, 2, "top-r-road");
        controller.render(level, "roundabout-road5_1", 5, 1, "left-r-road");
        controller.render(level, "roundabout-road4_1", 4, 1, "bottom-r-road");
        controller.render(level, "goal3_1", 3, 1, "goal");
        controller.render(level, "start-1_0", -1, 0, "start");
        controller.render(level, "goal1_5", 1, 5, "goal");

        return level;
    }

    public Level getLevel2(){
        Level level = new Level("Level 2");

        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start-1_0", -1, 0), "start-1_0");

        level.add(new Road(eventList, "road0_0"), "crosswalk1_0");
        level.add(new Crosswalk(50, 5, 20, 20, eventList, "crosswalk1_0"), "road2_0");
        level.add(new Road(eventList, "road2_0"), "trafficlights2_1");
        level.add(new TrafficLights(50, 1, 20, 1, eventList, "trafficlights2_1"), "road2_2");
        level.add(new Road(eventList, "road2_2"), "crosswalk1_2");
        level.add(new Crosswalk(10, 5, 20, 20, eventList, "crosswalk1_2"), "road0_2");
        level.add(new Road(eventList, "road0_2"), "trafficlights0_3");
        level.add(new TrafficLights(50, 1, 20, 1, eventList, "trafficlights0_3"), "road0_4");
        level.add(new Road(eventList, "road0_4"), "roundabout_bottom1_4");
        level.add(new Roundabout(eventList, "roundabout_bottom1_4"), "roundabout_right1_5");
        level.add(new Roundabout(eventList, "roundabout_right1_5"), "roundabout_top2_5");
        level.add(new Roundabout(eventList, "roundabout_top2_5"), "roundabout_left2_4");
        level.add(new Roundabout(eventList, "roundabout_left2_4"), new String[]{"roundabout_bottom1_4", "road3_4"});
        level.add(new Road(eventList, "road3_4"), "trafficlights4_4");
        level.add(new TrafficLights(50, 1, 20, 1, eventList, "trafficlights4_4"), "road5_4");
        level.add(new Road(eventList, "road5_4"), "crosswalk5_3");
        level.add(new Crosswalk(50, 5, 20, 20, eventList, "crosswalk5_3"), "road5_2");
        level.add(new Road(eventList, "road5_2"), "roundabout_right5_1");
        level.add(new Roundabout(eventList, "roundabout_right5_1"), "roundabout_top6_1");
        level.add(new Roundabout(eventList, "roundabout_top6_1"), "roundabout_left6_0");
        level.add(new Roundabout(eventList, "roundabout_left6_0"), "roundabout_bottom5_0");
        level.add(new Roundabout(eventList, "roundabout_bottom5_0"), new String[]{"roundabout_right5_1", "road4_0"});
        level.add(new Road(eventList, "road4_0"), "road3_0");
        level.add(new Road(eventList, "road3_0"), "road3_-1");
        level.add(new Road(eventList, "road3_-1"), "crosswalk2_-1");
        level.add(new Crosswalk(25, 5, 25, 20, eventList, "crosswalk2_-1"), "road1_-1");
        level.add(new Road(eventList, "road1_-1"), "road0_-1");
        level.add(new Road(eventList, "road0_-1"), "goal-1_-1");
        level.add(new Goal(eventList, "goal-1_-1"));
        level.add(new Road(eventList, "start-1_0"), "road0_0");

        controller.render(level, "road0_0", 0, 0, "right");
        controller.render(level, "crosswalk1_0", 1, 0, "right");
        controller.render(level, "road2_0", 2, 0, "left-turn");
        controller.render(level, "trafficlights2_1", 2, 1, "bottom");
        controller.render(level, "road2_2", 2, 2, "top-turn");
        controller.render(level, "crosswalk1_2", 1, 2, "left");
        controller.render(level, "road0_2", 0, 2, "bottom-turn");
        controller.render(level, "trafficlights0_3", 0, 3, "bottom");
        controller.render(level, "road0_4", 0, 4, "right-turn");
        controller.render(level, "roundabout_bottom1_4", 1, 4, "bottom-r-road");
        controller.render(level, "roundabout_right1_5", 1, 5, "right-r-road");
        controller.render(level, "roundabout_top2_5", 2, 5, "top-r-road");
        controller.render(level, "roundabout_left2_4", 2, 4, "left-r-road");
        controller.render(level, "road3_4", 3, 4, "right");
        controller.render(level, "trafficlights4_4", 4, 4, "right");
        controller.render(level, "road5_4", 5, 4, "top-turn");
        controller.render(level, "crosswalk5_3", 5, 3, "top");
        controller.render(level, "road5_2", 5, 2, "top");
        controller.render(level, "roundabout_right5_1", 5, 1, "right-r-road");
        controller.render(level, "roundabout_top6_1", 6, 1, "top-r-road");
        controller.render(level, "roundabout_left6_0", 6, 0, "left-r-road");
        controller.render(level, "roundabout_bottom5_0", 5, 0, "bottom-r-road");
        controller.render(level, "road4_0", 4, 0, "left");
        controller.render(level, "road3_0", 3, 0, "right-turn");
        controller.render(level, "road3_-1", 3, -1, "left-turn");
        controller.render(level, "crosswalk2_-1", 2, -1, "left");
        controller.render(level, "road1_-1", 1, -1, "right");
        controller.render(level, "road0_-1", 0, -1, "right");
        controller.render(level, "goal-1_-1", -1, -1, "goal");
        controller.render(level, "start-1_0", -1, 0, "start");

        return level;
    }

    public Level getLevel3() {
        Level level = new Level("Level 3");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR1", 0, 0), "road0_0");
        level.add(new Road(eventList, "road0_0"), "road0_1");
        level.add(new Road(eventList, "road0_1"), "road0_2");
        level.add(new Road(eventList, "road0_2"), "road0_3");
        level.add(new Road(eventList, "road0_3"), new String[]{"road0_4", "road1_3"});
        level.add(new Road(eventList, "road0_4"), "road0_5");
        level.add(new Road(eventList, "road0_5"));
        level.add(new Road(eventList, "road1_3"), "road2_3");
        level.add(new Road(eventList, "road2_3"), "roundabout3_3");
        level.add(new Roundabout(eventList, "roundabout3_3"), "roundabout3_4");
        level.add(new Roundabout(eventList, "roundabout3_4"), new String[]{"roundabout4_4", "road3_5"});
        level.add(new Road(eventList, "road3_5"), "road2_5");
        level.add(new Road(eventList, "road2_5"), "road2_4");
        level.add(new Road(eventList, "road2_4"), "roundabout3_4");
        level.add(new Roundabout(eventList, "roundabout4_4"), new String[]{"roundabout4_3", "road5_4"});
        level.add(new Road(eventList, "road5_4"), "road5_5");
        level.add(new Road(eventList, "road5_5"), "road4_5");
        level.add(new Road(eventList, "road4_5"), "roundabout4_4");
        level.add(new Roundabout(eventList, "roundabout4_3"), new String[]{"roundabout3_3", "road4_2"});
        level.add(new Road(eventList, "road4_2"), "goal4_1");
        level.add(new Goal(eventList, "goal4_1"));

        controller.render(level, "road0_0", 0, 0, "bottom");
        controller.render(level, "road0_1", 0, 1, "bottom");
        controller.render(level, "road0_2", 0, 2, "bottom");
        controller.render(level, "road0_3", 0, 3, "t-intersection-right");
        controller.render(level, "road0_4", 0, 4, "bottom");
        controller.render(level, "road0_5", 0, 5, "bottom");
        controller.render(level, "road1_3", 1, 3, "right");
        controller.render(level, "road2_3", 2, 3, "right");
        controller.render(level, "roundabout3_3", 3, 3, "bottom-r-road");
        controller.render(level, "roundabout3_4", 3, 4, "right-double");
        controller.render(level, "road3_5", 3, 5, "top-turn");
        controller.render(level, "road2_5", 2, 5, "right-turn");
        controller.render(level, "road2_4", 2, 4, "bottom-turn");
        controller.render(level, "roundabout4_4", 4, 4, "top-double");
        controller.render(level, "road5_4", 5, 4, "left-turn");
        controller.render(level, "road5_5", 5, 5, "top-turn");
        controller.render(level, "road4_5", 4, 5, "right-turn");
        controller.render(level, "roundabout4_3", 4, 3, "left-r-road");
        controller.render(level, "road4_2", 4, 2, "top");
        controller.render(level, "goal4_1", 4, 1, "goal");


        return level;
    }

    public Level getLevel4() {
        Level level = new Level("Level 4");

        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start0_3", 0, 3), "start0_3");

        level.add(new Road(eventList, "road1_3"), "road2_3");
        level.add(new Road(eventList, "road2_3"), "roundabout3_3");
        level.add(new Roundabout(eventList, "roundabout3_3"), "roundabout3_4");
        level.add(new Roundabout(eventList, "roundabout3_4"), new String[]{"roundabout4_4", "road3_5"});
        level.add(new Road(eventList, "road3_5"), "road2_5");
        level.add(new Road(eventList, "road2_5"), "road2_4");
        level.add(new Road(eventList, "road2_4"), "roundabout3_4");
        level.add(new Roundabout(eventList, "roundabout4_4"), new String[]{"roundabout4_3", "road5_4"});
        level.add(new Road(eventList, "road5_4"), "road5_5");
        level.add(new Road(eventList, "road5_5"), "road4_5");
        level.add(new Road(eventList, "road4_5"), "roundabout4_4");
        level.add(new Roundabout(eventList, "roundabout4_3"), new String[]{"roundabout3_3", "road4_2"});
        level.add(new Road(eventList, "road4_2"), "goal4_1");
        level.add(new Goal(eventList, "goal4_1"));
        level.add(new Road(eventList, "start0_3"), "road1_3");

        controller.render(level, "road1_3", 1, 3, "right");
        controller.render(level, "road2_3", 2, 3, "right");
        controller.render(level, "roundabout3_3", 3, 3, "bottom-r-road");
        controller.render(level, "roundabout3_4", 3, 4, "right-double");
        controller.render(level, "road3_5", 3, 5, "top-turn");
        controller.render(level, "road2_5", 2, 5, "right-turn");
        controller.render(level, "road2_4", 2, 4, "bottom-turn");
        controller.render(level, "roundabout4_4", 4, 4, "top-double");
        controller.render(level, "road5_4", 5, 4, "left-turn");
        controller.render(level, "road5_5", 5, 5, "top-turn");
        controller.render(level, "road4_5", 4, 5, "right-turn");
        controller.render(level, "roundabout4_3", 4, 3, "left-r-road");
        controller.render(level, "road4_2", 4, 2, "top");
        controller.render(level, "goal4_1", 4, 1, "goal");
        controller.render(level, "start0_3", 0, 3, "start");

        return level;
    }

    public Level getLevel5(){
        Level level = new Level("Level 5");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start-1_0", -1, 0), "start-1_0");

        level.add(new Road(eventList, "road0_0"), "road1_0");
        level.add(new Road(eventList, "road1_0"), new String[]{"road1_-1", "road1_1"});
        level.add(new Road(eventList, "road1_-1"), "road1_-2");
        level.add(new Road(eventList, "road1_-2"), "crosswalk2_-2");
        level.add(new Crosswalk(50, 5, 20, 20, eventList, "crosswalk2_-2"), "road3_-2");
        level.add(new Road(eventList, "road3_-2"), "road3_-1");
        level.add(new Road(eventList, "road3_-1"), "roundabout_bottom4_-1");
        level.add(new Road(eventList, "road1_1"), "trafficlights2_1");
        level.add(new TrafficLights(50, 1, 20, 1, eventList, "trafficlights2_1"), "road3_1");
        level.add(new Road(eventList, "road3_1"), "road4_1");
        level.add(new Road(eventList, "road4_1"), "roundabout_right4_0");
        level.add(new Roundabout(eventList, "roundabout_right4_0"), "roundabout_top5_0");
        level.add(new Roundabout(eventList, "roundabout_top5_0"), new String[]{"roundabout_left5_-1", "road6_0"});
        level.add(new Roundabout(eventList, "roundabout_left5_-1"), new String[]{"roundabout_bottom4_-1", "road5_-2"});
        level.add(new Roundabout(eventList, "roundabout_bottom4_-1"), "roundabout_right4_0");
        level.add(new Road(eventList, "road6_0"), "crosswalk7_0");
        level.add(new Crosswalk(50, 5, 20, 20, eventList, "crosswalk7_0"), "goal8_0");
        level.add(new Goal(eventList, "goal8_0"));
        level.add(new Road(eventList, "road5_-2"), "trafficlights5_-3");
        level.add(new TrafficLights(50, 1, 20, 1, eventList, "trafficlights5_-3"), "goal5_-4");
        level.add(new Goal(eventList, "goal5_-4"));
        level.add(new Road(eventList, "start-1_0"), "road0_0");

        controller.render(level, "road0_0", 0, 0, "right");
        controller.render(level, "road1_0", 1, 0, "t-intersection-left");
        controller.render(level, "road1_-1", 1, -1, "top");
        controller.render(level, "road1_-2", 1, -2, "bottom-turn");
        controller.render(level, "crosswalk2_-2", 2, -2, "right");
        controller.render(level, "road3_-2", 3, -2, "left-turn");
        controller.render(level, "road3_-1", 3, -1, "right-turn");
        controller.render(level, "road1_1", 1, 1, "right-turn");
        controller.render(level, "trafficlights2_1", 2, 1, "right");
        controller.render(level, "road3_1", 3, 1, "right");
        controller.render(level, "road4_1", 4, 1, "top-turn");
        controller.render(level, "roundabout_right4_0", 4, 0, "right-r-road");
        controller.render(level, "roundabout_top5_0", 5, 0, "top-r-road");
        controller.render(level, "roundabout_left5_-1", 5, -1, "left-r-road");
        controller.render(level, "roundabout_bottom4_-1", 4, -1, "bottom-r-road");
        controller.render(level, "road6_0", 6, 0, "right");
        controller.render(level, "crosswalk7_0", 7, 0, "right");
        controller.render(level, "goal8_0", 8, 0, "goal");
        controller.render(level, "road5_-2", 5, -2, "top");
        controller.render(level, "trafficlights5_-3", 5, -3, "top");
        controller.render(level, "goal5_-4", 5, -4, "goal");
        controller.render(level, "start-1_0", -1, 0, "start");

        return level;
    }

    public Level getLevel6() {
        Level level = new Level("Level 6");

        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR1", 2, 2), "road2_2");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR2", 2, 4), "road2_4");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR3", 2, 6), "road2_6");

        level.add(new Road(eventList, "road2_2"), "road3_2");
        level.add(new Road(eventList, "road3_2"), "road4_2");
        level.add(new Road(eventList, "road4_2"), "road5_2");
        level.add(new Road(eventList, "road6_2"), "road7_2");
        level.add(new Road(eventList, "road7_2"), "road8_2");
        level.add(new Road(eventList, "road8_2"), "road9_2");
        level.add(new Road(eventList, "road5_2"), "road6_2");
        level.add(new Road(eventList, "road9_2"), "road10_2");
        level.add(new Road(eventList, "road10_2"), "road11_2");
        level.add(new Road(eventList, "road11_2"), "goal12_2");
        level.add(new Road(eventList, "road2_4"), "road3_4");
        level.add(new Road(eventList, "road3_4"), "road4_4");
        level.add(new Road(eventList, "road4_4"), new String[]{"road5_4", "road5_4"});
        level.add(new Road(eventList, "road5_4"), new String[]{"road6_4", "road6_4"});
        level.add(new Road(eventList, "road6_4"), "road7_4");
        level.add(new Road(eventList, "road7_4"), new String[]{"road8_4", "road8_4"});
        level.add(new Road(eventList, "road8_4"), new String[]{"road9_4", "road9_4"});
        level.add(new Road(eventList, "road9_4"), new String[]{"road10_4", "road10_4"});
        level.add(new Road(eventList, "road10_4"), "road11_4");
        level.add(new Road(eventList, "road11_4"), "goal12_4");
        level.add(new Road(eventList, "road2_6"), "road3_6");
        level.add(new Road(eventList, "road3_6"), "road4_6");
        level.add(new Road(eventList, "road4_6"), "road-turn5_6");
        level.add(new Road(eventList, "road-turn5_6"), "road5_7");
        level.add(new Road(eventList, "road-turn8_6"), "road9_6");
        level.add(new Road(eventList, "road9_6"), "road10_6");
        level.add(new Road(eventList, "road10_6"), "road11_6");
        level.add(new Road(eventList, "road11_6"), "goal12_6");
        level.add(new Road(eventList, "road-turn5_8"), "road6_8");
        level.add(new Road(eventList, "road-turn8_8"), "road8_7");
        level.add(new Road(eventList, "road5_7"), "road-turn5_8");
        level.add(new Road(eventList, "road6_8"), "road7_8");
        level.add(new Road(eventList, "road7_8"), "road-turn8_8");
        level.add(new Road(eventList, "road8_7"), "road-turn8_6");
        level.add(new Goal(eventList, "goal12_6"));
        level.add(new Goal(eventList, "goal12_4"));
        level.add(new Goal(eventList, "goal12_2"));

        controller.render(level, "road2_2", 2, 2, "right");
        controller.render(level, "road3_2", 3, 2, "right");
        controller.render(level, "road4_2", 4, 2, "right");
        controller.render(level, "road6_2", 6, 2, "right");
        controller.render(level, "road7_2", 7, 2, "right");
        controller.render(level, "road8_2", 8, 2, "right");
        controller.render(level, "road5_2", 5, 2, "right");
        controller.render(level, "road9_2", 9, 2, "right");
        controller.render(level, "road10_2", 10, 2, "right");
        controller.render(level, "road11_2", 11, 2, "right");
        controller.render(level, "road2_4", 2, 4, "right");
        controller.render(level, "road3_4", 3, 4, "right");
        controller.render(level, "road4_4", 4, 4, "right");
        controller.render(level, "road5_4", 5, 4, "right");
        controller.render(level, "road6_4", 6, 4, "right");
        controller.render(level, "road7_4", 7, 4, "right");
        controller.render(level, "road8_4", 8, 4, "right");
        controller.render(level, "road9_4", 9, 4, "right");
        controller.render(level, "road10_4", 10, 4, "right");
        controller.render(level, "road11_4", 11, 4, "right");
        controller.render(level, "road2_6", 2, 6, "right");
        controller.render(level, "road3_6", 3, 6, "right");
        controller.render(level, "road4_6", 4, 6, "right");
        controller.render(level, "road-turn5_6", 5, 6, "left-turn");
        controller.render(level, "road-turn8_6", 8, 6, "bottom-turn");
        controller.render(level, "road9_6", 9, 6, "right");
        controller.render(level, "road10_6", 10, 6, "right");
        controller.render(level, "road11_6", 11, 6, "right");
        controller.render(level, "road-turn5_8", 5, 8, "right-turn");
        controller.render(level, "road-turn8_8", 8, 8, "top-turn");
        controller.render(level, "road5_7", 5, 7, "bottom");
        controller.render(level, "road6_8", 6, 8, "left");
        controller.render(level, "road7_8", 7, 8, "left");
        controller.render(level, "road8_7", 8, 7, "bottom");
        controller.render(level, "goal12_6", 12, 6, "goal");
        controller.render(level, "goal12_4", 12, 4, "goal");
        controller.render(level, "goal12_2", 12, 2, "goal");

        return level;
    }

    public Level getLevel7() {
        Level level = new Level("Level 7");

        level.arrival(new ArrivalProcess(new Normal(100, 1), eventList, "ARR1", 0, 0), "road0_0");

        level.add(new Road(eventList, "road0_0"), "road1_0");
        level.add(new Road(eventList, "road1_0"), "roundabout-entrance2_0");
        level.add(new Roundabout(eventList, "roundabout-entrance2_0"), "roundabout3_0");
        level.add(new Roundabout(eventList, "roundabout-r-road2_-1"), new String[]{"roundabout-entrance2_0", "road1_-1"});
        level.add(new Roundabout(eventList, "roundabout3_-1"), "roundabout-r-road2_-1");
        level.add(new Roundabout(eventList, "roundabout3_0"), "roundabout3_-1");
        level.add(new Road(eventList, "road1_-1"), "goal0_-1");
        level.add(new Goal(eventList, "goal0_-1"));

        controller.render(level, "road0_0", 0, 0, "right");
        controller.render(level, "road1_0", 1, 0, "right");
        controller.render(level, "roundabout-entrance2_0", 2, 0, "right-r-entrance");
        controller.render(level, "roundabout-r-road2_-1", 2, -1, "bottom-r-road");
        controller.render(level, "roundabout3_-1", 3, -1, "left");
        controller.render(level, "roundabout3_0", 3, 0, "top");
        controller.render(level, "road1_-1", 1, -1, "right");
        controller.render(level, "goal0_-1", 0, -1, "goal");
        return level;
    }

    public Level getLevel8() {
        Level level = new Level("Level 8");

        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start0_4", 0, 4), "start0_4");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start0_-1", 0, -1), "start0_-1");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start6_8", 6, 8), "start6_8");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start7_9", 7, 9), "start7_9");

        level.add(new Road(eventList, "road1_4"), "t-intersection2_4");
        level.add(new Road(eventList, "t-intersection2_4"), new String[]{"crosswalk2_5", "crosswalk2_3"});
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk2_3"), "road-turn2_2");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk2_5"), "road-turn2_6");
        level.add(new Road(eventList, "road-turn2_2"), "road-turn3_2");
        level.add(new Road(eventList, "road-turn2_6"), "road-turn3_6");
        level.add(new Road(eventList, "road-turn3_6"), "trafficlight3_5");
        level.add(new Road(eventList, "road-turn3_2"), "trafficlight3_3");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight3_3"), "t-intersection3_4");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight3_5"), "t-intersection3_4");
        level.add(new Road(eventList, "t-intersection3_4"), "t-intersection4_4");
        level.add(new Road(eventList, "t-intersection4_4"), new String[]{"road-turn4_5", "t-intersection5_4"});
        level.add(new Road(eventList, "t-intersection5_4"), "t-intersection6_4");
        level.add(new Road(eventList, "road5_3"), "t-intersection5_4");
        level.add(new Road(eventList, "road-turn5_2"), "road5_3");
        level.add(new Road(eventList, "road-turn4_2"), "road-turn5_2");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight4_1"), "road-turn4_2");
        level.add(new Road(eventList, "t-intersection4_0"), new String[]{"trafficlight5_0", "trafficlight4_1"});
        level.add(new Road(eventList, "road-turn2_0"), "crosswalk3_0");
        level.add(new Road(eventList, "road3_-1"), "crosswalk4_-1");
        level.add(new Road(eventList, "road5_-1"), "road-turn6_-1");
        level.add(new Road(eventList, "road-turn6_-1"), "t-intersection6_0");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight5_0"), "t-intersection6_0");
        level.add(new Road(eventList, "t-intersection6_0"), "crosswalk6_1");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk6_1"), "t-intersection6_2");
        level.add(new Road(eventList, "road1_-1"), "t-intersection2_-1");
        level.add(new Road(eventList, "t-intersection2_-1"), new String[]{"road3_-1", "road-turn2_0"});
        level.add(new Road(eventList, "road6_7"), "trafficlight6_6");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight6_6"), "t-intersection6_5");
        level.add(new Road(eventList, "t-intersection6_5"), "t-intersection6_4");
        level.add(new Road(eventList, "t-intersection6_4"), "t-intersection6_3");
        level.add(new Road(eventList, "t-intersection6_3"), new String[]{"road-turn7_3", "t-intersection6_2"});
        level.add(new Road(eventList, "t-intersection6_2"), "road-turn7_2");
        level.add(new Road(eventList, "road-turn7_2"), "road-turn7_1");
        level.add(new Road(eventList, "road-turn7_3"), "road-turn7_4");
        level.add(new Road(eventList, "road-turn7_4"), "road8_4");
        level.add(new Road(eventList, "road-turn7_1"), "t-intersection8_1");
        level.add(new Road(eventList, "t-intersection8_1"), "road-turn8_0");
        level.add(new Road(eventList, "road-turn8_0"), "road-turn7_0");
        level.add(new Road(eventList, "road-turn7_0"), "road-turn7_-1");
        level.add(new Road(eventList, "road-turn7_-1"), "road8_-1");
        level.add(new Road(eventList, "road8_-1"), "trafficlight9_-1");
        level.add(new Road(eventList, "road8_4"), "road-turn9_4");
        level.add(new Road(eventList, "road-turn9_4"), "road-turn9_5");
        level.add(new Road(eventList, "road-turn9_5"), "t-intersection8_5");
        level.add(new Road(eventList, "t-intersection8_5"), new String[]{"t-intersection8_6", "road-turn7_5"});
        level.add(new Road(eventList, "road-turn7_5"), "t-intersection7_6");
        level.add(new Road(eventList, "t-intersection7_6"), new String[]{"t-intersection8_6", "t-intersection7_7"});
        level.add(new Road(eventList, "t-intersection8_6"), "t-intersection8_7");
        level.add(new Road(eventList, "t-intersection7_7"), "t-intersection8_7");
        level.add(new Road(eventList, "t-intersection8_7"), "road-turn9_7");
        level.add(new Road(eventList, "road-turn9_7"), "road-turn9_6");
        level.add(new Road(eventList, "road-turn9_6"), "crosswalk10_6");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk10_6"), "road-turn11_6");
        level.add(new Road(eventList, "road-turn11_6"), "road11_5");
        level.add(new Road(eventList, "road11_5"), "t-intersection11_4");
        level.add(new Road(eventList, "t-intersection11_4"), new String[]{"road-turn11_3", "road-turn10_4"});
        level.add(new Road(eventList, "road-turn10_4"), "roundabout-entrance10_3");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight9_-1"), "road-turn10_-1");
        level.add(new Road(eventList, "road-turn10_-1"), "road10_0");
        level.add(new Road(eventList, "road-turn9_1"), "roundabout-entrance9_2");
        level.add(new Road(eventList, "road10_0"), "t-intersection10_1");
        level.add(new Road(eventList, "t-intersection10_1"), new String[]{"road-turn9_1", "road11_1"});
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk3_0"), "t-intersection4_0");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk4_-1"), "road5_-1");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk5_5"), "t-intersection6_5");
        level.add(new Road(eventList, "road11_1"), "t-intersection12_1");
        level.add(new Road(eventList, "road11_2"), "t-intersection12_2");
        level.add(new Road(eventList, "road7_8"), "t-intersection7_7");
        level.add(new Road(eventList, "t-intersection12_2"), new String[]{"t-intersection12_3", "t-intersection12_1"});
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk12_4"), "road12_5");
        level.add(new Road(eventList, "road12_5"), "road-turn12_6");
        level.add(new Road(eventList, "road-turn12_6"), "trafficlight13_6");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight13_6"), "goal14_6");
        level.add(new Goal(eventList, "goal14_6"));
        level.add(new Road(eventList, "t-intersection12_1"), "road-turn12_0");
        level.add(new Road(eventList, "road-turn12_0"), "crosswalk13_0");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk13_0"), "goal14_0");
        level.add(new Goal(eventList, "goal14_0"));
        level.add(new Road(eventList, "road-turn4_5"), "crosswalk5_5");
        level.add(new Road(eventList, "road-turn8_3"), "road8_2");
        level.add(new Road(eventList, "road8_2"), "t-intersection8_1");
        level.add(new Road(eventList, "road-turn11_3"), "t-intersection12_3");
        level.add(new Roundabout(eventList, "roundabout-entrance10_3"), "roundabout-entrance10_2");
        level.add(new Roundabout(eventList, "roundabout-entrance9_3"), new String[]{"roundabout-entrance10_3", "road-turn8_3"});
        level.add(new Roundabout(eventList, "roundabout-entrance9_2"), "roundabout-entrance9_3");
        level.add(new Roundabout(eventList, "roundabout-entrance10_2"), new String[]{"roundabout-entrance9_2", "road11_2"});
        level.add(new Road(eventList, "t-intersection12_3"), "crosswalk12_4");
        level.add(new Road(eventList, "start0_4"), "road1_4");
        level.add(new Road(eventList, "start0_-1"), "road1_-1");
        level.add(new Road(eventList, "start6_8"), "road6_7");
        level.add(new Road(eventList, "start7_9"), "road7_8");

        controller.render(level, "road1_4", 1, 4, "right");
        controller.render(level, "t-intersection2_4", 2, 4, "t-intersection-left");
        controller.render(level, "crosswalk2_3", 2, 3, "top");
        controller.render(level, "crosswalk2_5", 2, 5, "bottom");
        controller.render(level, "road-turn2_2", 2, 2, "bottom-turn");
        controller.render(level, "road-turn2_6", 2, 6, "right-turn");
        controller.render(level, "road-turn3_6", 3, 6, "top-turn");
        controller.render(level, "road-turn3_2", 3, 2, "left-turn");
        controller.render(level, "trafficlight3_3", 3, 3, "bottom");
        controller.render(level, "trafficlight3_5", 3, 5, "top");
        controller.render(level, "t-intersection3_4", 3, 4, "t-intersection-right");
        controller.render(level, "t-intersection4_4", 4, 4, "t-intersection-bottom");
        controller.render(level, "t-intersection5_4", 5, 4, "t-intersection-top");
        controller.render(level, "road5_3", 5, 3, "bottom");
        controller.render(level, "road-turn5_2", 5, 2, "left-turn");
        controller.render(level, "road-turn4_2", 4, 2, "right-turn");
        controller.render(level, "trafficlight4_1", 4, 1, "top");
        controller.render(level, "t-intersection4_0", 4, 0, "t-intersection-bottom");
        controller.render(level, "road-turn2_0", 2, 0, "right-turn");
        controller.render(level, "road3_-1", 3, -1, "right");
        controller.render(level, "road5_-1", 5, -1, "right");
        controller.render(level, "road-turn6_-1", 6, -1, "left-turn");
        controller.render(level, "trafficlight5_0", 5, 0, "right");
        controller.render(level, "t-intersection6_0", 6, 0, "t-intersection-left");
        controller.render(level, "crosswalk6_1", 6, 1, "bottom");
        controller.render(level, "road1_-1", 1, -1, "left");
        controller.render(level, "t-intersection2_-1", 2, -1, "t-intersection-bottom");
        controller.render(level, "road6_7", 6, 7, "bottom");
        controller.render(level, "trafficlight6_6", 6, 6, "top");
        controller.render(level, "t-intersection6_5", 6, 5, "t-intersection-left");
        controller.render(level, "t-intersection6_4", 6, 4, "t-intersection-left");
        controller.render(level, "t-intersection6_3", 6, 3, "t-intersection-right");
        controller.render(level, "t-intersection6_2", 6, 2, "t-intersection-right");
        controller.render(level, "road-turn7_2", 7, 2, "top-turn");
        controller.render(level, "road-turn7_3", 7, 3, "left-turn");
        controller.render(level, "road-turn7_4", 7, 4, "right-turn");
        controller.render(level, "road-turn7_1", 7, 1, "bottom-turn");
        controller.render(level, "t-intersection8_1", 8, 1, "t-intersection-left");
        controller.render(level, "road-turn8_0", 8, 0, "left-turn");
        controller.render(level, "road-turn7_0", 7, 0, "right-turn");
        controller.render(level, "road-turn7_-1", 7, -1, "bottom-turn");
        controller.render(level, "road8_-1", 8, -1, "right");
        controller.render(level, "road8_4", 8, 4, "right");
        controller.render(level, "road-turn9_4", 9, 4, "left-turn");
        controller.render(level, "road-turn9_5", 9, 5, "top-turn");
        controller.render(level, "t-intersection8_5", 8, 5, "t-intersection-bottom");
        controller.render(level, "road-turn7_5", 7, 5, "bottom-turn");
        controller.render(level, "t-intersection7_6", 7, 6, "t-intersection-right");
        controller.render(level, "t-intersection8_6", 8, 6, "t-intersection-left");
        controller.render(level, "t-intersection7_7", 7, 7, "t-intersection-right");
        controller.render(level, "t-intersection8_7", 8, 7, "t-intersection-top");
        controller.render(level, "road-turn9_7", 9, 7, "top-turn");
        controller.render(level, "road-turn9_6", 9, 6, "bottom-turn");
        controller.render(level, "crosswalk10_6", 10, 6, "right");
        controller.render(level, "road-turn11_6", 11, 6, "top-turn");
        controller.render(level, "road11_5", 11, 5, "top");
        controller.render(level, "t-intersection11_4", 11, 4, "t-intersection-left");
        controller.render(level, "road-turn10_4", 10, 4, "right-turn");
        controller.render(level, "trafficlight9_-1", 9, -1, "right");
        controller.render(level, "road-turn10_-1", 10, -1, "left-turn");
        controller.render(level, "road-turn9_1", 9, 1, "bottom-turn");
        controller.render(level, "road10_0", 10, 0, "bottom");
        controller.render(level, "t-intersection10_1", 10, 1, "t-intersection-top");
        controller.render(level, "crosswalk3_0", 3, 0, "right");
        controller.render(level, "crosswalk4_-1", 4, -1, "right");
        controller.render(level, "crosswalk5_5", 5, 5, "right");
        controller.render(level, "road11_1", 11, 1, "right");
        controller.render(level, "road11_2", 11, 2, "right");
        controller.render(level, "road7_8", 7, 8, "top");
        controller.render(level, "t-intersection12_2", 12, 2, "t-intersection-left");
        controller.render(level, "crosswalk12_4", 12, 4, "bottom");
        controller.render(level, "road12_5", 12, 5, "bottom");
        controller.render(level, "road-turn12_6", 12, 6, "right-turn");
        controller.render(level, "trafficlight13_6", 13, 6, "right");
        controller.render(level, "goal14_6", 14, 6, "goal");
        controller.render(level, "t-intersection12_1", 12, 1, "t-intersection-left");
        controller.render(level, "road-turn12_0", 12, 0, "bottom-turn");
        controller.render(level, "crosswalk13_0", 13, 0, "right");
        controller.render(level, "goal14_0", 14, 0, "goal");
        controller.render(level, "road-turn4_5", 4, 5, "right-turn");
        controller.render(level, "road-turn8_3", 8, 3, "right-turn");
        controller.render(level, "road8_2", 8, 2, "bottom");
        controller.render(level, "road-turn11_3", 11, 3, "bottom-turn");
        controller.render(level, "roundabout-entrance10_3", 10, 3, "top-r-entrance");
        controller.render(level, "roundabout-entrance9_3", 9, 3, "right-r-entrance");
        controller.render(level, "roundabout-entrance9_2", 9, 2, "bottom-r-entrance");
        controller.render(level, "roundabout-entrance10_2", 10, 2, "left-r-entrance");
        controller.render(level, "t-intersection12_3", 12, 3, "t-intersection-left");
        controller.render(level, "start0_4", 0, 4, "start");
        controller.render(level, "start0_-1", 0, -1, "start");
        controller.render(level, "start6_8", 6, 8, "start");
        controller.render(level, "start7_9", 7, 9, "start");

        return level;
    }
    public Level getLevel9(){
        Level level = new Level("Level 9");

        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start0_0", 0, 0), "start0_0");

        level.add(new Road(eventList, "start0_0"), "road1_0");
        level.add(new Road(eventList, "road1_0"), "road2_0");
        level.add(new Road(eventList, "road2_0"), "crosswalk3_0");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk3_0"), "t-intersection4_0");
        level.add(new Road(eventList, "t-intersection4_0"), new String[]{"road4_-1", "road-turn4_1"});
        level.add(new Road(eventList, "road-turn4_1"), "road5_1");
        level.add(new Road(eventList, "road4_-1"), "road4_-2");
        level.add(new Road(eventList, "road4_-2"), "road-turn4_-3");
        level.add(new Road(eventList, "road5_1"), "road6_1");
        level.add(new Road(eventList, "road6_1"), "road7_1");
        level.add(new Road(eventList, "road7_1"), "trafficlight8_1");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight8_1"), "road-turn9_1");
        level.add(new Road(eventList, "road-turn4_-3"), "road5_-3");
        level.add(new Road(eventList, "road5_-3"), "road6_-3");
        level.add(new Road(eventList, "road6_-3"), "road7_-3");
        level.add(new Road(eventList, "road7_-3"), "crosswalk8_-3");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk8_-3"), "road9_-3");
        level.add(new Road(eventList, "road-turn9_1"), "t-intersection9_2");
        level.add(new Road(eventList, "t-intersection9_2"), new String[]{"road9_3", "road10_2"});
        level.add(new Road(eventList, "road9_3"), "road9_4");
        level.add(new Road(eventList, "road9_4"), "road9_5");
        level.add(new Road(eventList, "road9_5"), "road9_6");
        level.add(new Road(eventList, "road9_6"), "road9_7");
        level.add(new Road(eventList, "road9_7"), "crosswalk9_8");
        level.add(new Road(eventList, "road10_2"), "road11_2");
        level.add(new Road(eventList, "road11_2"), "road12_2");
        level.add(new Road(eventList, "road12_2"), "road13_2");
        level.add(new Road(eventList, "road13_2"), "t-intersection14_2");
        level.add(new Road(eventList, "t-intersection14_2"), new String[]{"t-intersection15_2", "road14_1"});
        level.add(new Road(eventList, "road9_-3"), "road10_-3");
        level.add(new Road(eventList, "road10_-3"), "road11_-3");
        level.add(new Road(eventList, "road11_-3"), "road12_-3");
        level.add(new Road(eventList, "road12_-3"), "road13_-3");
        level.add(new Road(eventList, "road13_-3"), "t-intersection14_-3");
        level.add(new Road(eventList, "t-intersection14_-3"), "road-turn15_-3");
        level.add(new Road(eventList, "road14_-2"), "t-intersection14_-3");
        level.add(new Road(eventList, "road14_-1"), "road14_-2");
        level.add(new Road(eventList, "road14_0"), "road14_-1");
        level.add(new Road(eventList, "road14_1"), "road14_0");
        level.add(new Road(eventList, "road-turn15_-3"), "trafficlight15_-4");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight15_-4"), "road15_-5");
        level.add(new Road(eventList, "road-turn18_-6"), "roundabout-entrance18_-5");
        level.add(new Road(eventList, "road17_-6"), "road-turn18_-6");
        level.add(new Road(eventList, "road16_-6"), "road17_-6");
        level.add(new Road(eventList, "road-turn15_-6"), "road16_-6");
        level.add(new Road(eventList, "road15_-5"), "road-turn15_-6");
        level.add(new Road(eventList, "t-intersection15_2"), new String[]{"trafficlight16_2", "trafficlight15_3"});
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight16_2"), "road17_2");
        level.add(new Road(eventList, "road17_2"), "road-turn18_2");
        level.add(new Road(eventList, "road-turn18_2"), "road18_1");
        level.add(new Road(eventList, "road18_1"), "road18_0");
        level.add(new Road(eventList, "road18_0"), "road18_-1");
        level.add(new Road(eventList, "road18_-1"), "road-turn18_-2");
        level.add(new Road(eventList, "road-turn18_-2"), "road-turn19_-2");
        level.add(new Road(eventList, "road-turn19_-2"), "road19_-3");
        level.add(new Road(eventList, "road19_-3"), "roundabout-double19_-4");
        level.add(new Road(eventList, "road20_-4"), "road21_-4");
        level.add(new Road(eventList, "road19_-6"), "road19_-7");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk9_8"), "road-turn9_9");
        level.add(new Road(eventList, "road-turn9_9"), "road10_9");
        level.add(new Road(eventList, "road10_9"), "road11_9");
        level.add(new Road(eventList, "road11_9"), "road12_9");
        level.add(new Road(eventList, "road12_9"), "road13_9");
        level.add(new Road(eventList, "road13_9"), "road14_9");
        level.add(new Road(eventList, "road14_9"), "road-turn15_9");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight15_3"), "road15_4");
        level.add(new Road(eventList, "road15_4"), "roundabout-entrance15_5");
        level.add(new Road(eventList, "road-turn15_9"), "trafficlight15_8");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight15_8"), "road15_7");
        level.add(new Road(eventList, "road15_7"), "roundabout-r-road15_6");
        level.add(new Road(eventList, "road17_6"), "road18_6");
        level.add(new Road(eventList, "road18_6"), "road19_6");
        level.add(new Road(eventList, "road19_6"), "crosswalk20_6");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk20_6"), "road21_6");
        level.add(new Road(eventList, "road21_6"), "road22_6");
        level.add(new Road(eventList, "road22_6"), "roundabout-entrance23_6");
        level.add(new Road(eventList, "road19_-7"), "crosswalk19_-8");
        level.add(new Road(eventList, "road21_-4"), "crosswalk22_-4");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk19_-8"), "road-turn19_-9");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk22_-4"), "t-intersection23_-4");
        level.add(new Road(eventList, "t-intersection20_-9"), new String[]{"road21_-9", "road-turn20_-10"});
        level.add(new Road(eventList, "road21_-9"), "road22_-9");
        level.add(new Road(eventList, "road22_-9"), "t-intersection23_-9");
        level.add(new Road(eventList, "t-intersection23_-9"), new String[]{"road-turn23_-10", "road23_-8"});
        level.add(new Road(eventList, "road-turn23_-3"), "road24_-3");
        level.add(new Road(eventList, "road-turn20_-10"), "road-turn19_-10");
        level.add(new Road(eventList, "road-turn23_-10"), "road24_-10");
        level.add(new Road(eventList, "road24_-10"), "road25_-10");
        level.add(new Road(eventList, "road25_-10"), "road26_-10");
        level.add(new Road(eventList, "road26_-10"), "road27_-10");
        level.add(new Road(eventList, "road27_-10"), "trafficlight28_-10");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight28_-10"), "t-intersection29_-10");
        level.add(new Road(eventList, "road-turn19_-10"), "road-turn19_-11");
        level.add(new Road(eventList, "road-turn19_-11"), "road-turn18_-11");
        level.add(new Road(eventList, "road-turn18_-11"), "road-turn18_-12");
        level.add(new Road(eventList, "road-turn18_-12"), "road-turn17_-12");
        level.add(new Road(eventList, "road-turn17_-12"), "road-turn17_-13");
        level.add(new Road(eventList, "road-turn17_-13"), "goal16_-13");
        level.add(new Goal(eventList, "goal16_-13"));
        level.add(new Road(eventList, "road24_-3"), "crosswalk25_-3");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk25_-3"), "road26_-3");
        level.add(new Road(eventList, "road26_-3"), "road27_-3");
        level.add(new Road(eventList, "road27_-3"), "road28_-3");
        level.add(new Road(eventList, "t-intersection29_-10"), new String[]{"road-turn29_-11", "road29_-9"});
        level.add(new Road(eventList, "road29_-9"), "road29_-8");
        level.add(new Road(eventList, "road29_-8"), "road29_-7");
        level.add(new Road(eventList, "road29_-7"), "crosswalk29_-6");
        level.add(new Road(eventList, "road-turn29_-11"), "road30_-11");
        level.add(new Road(eventList, "road30_-11"), "road31_-11");
        level.add(new Road(eventList, "road31_-11"), "crosswalk32_-11");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk32_-11"), "road33_-11");
        level.add(new Road(eventList, "road33_-11"), "road34_-11");
        level.add(new Road(eventList, "road34_-11"), "goal35_-11");
        level.add(new Goal(eventList, "goal35_-11"));
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk29_-6"), "road29_-5");
        level.add(new Road(eventList, "road29_-5"), "roundabout-entrance29_-4");
        level.add(new Road(eventList, "road31_-3"), "crosswalk32_-3");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk32_-3"), "t-intersection33_-3");
        level.add(new Road(eventList, "t-intersection33_-3"), new String[]{"road33_-4", "road33_-2"});
        level.add(new Road(eventList, "road33_-2"), "road33_-1");
        level.add(new Road(eventList, "road33_-4"), "road33_-5");
        level.add(new Road(eventList, "road33_-5"), "road33_-6");
        level.add(new Road(eventList, "road33_-6"), "road-turn33_-7");
        level.add(new Road(eventList, "road33_-1"), "road33_0");
        level.add(new Road(eventList, "road33_0"), "road-turn33_1");
        level.add(new Road(eventList, "road-turn33_-7"), "goal34_-7");
        level.add(new Goal(eventList, "goal34_-7"));
        level.add(new Road(eventList, "road-turn33_1"), "crosswalk32_1");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk32_1"), "road31_1");
        level.add(new Road(eventList, "road31_1"), "road30_1");
        level.add(new Road(eventList, "road30_1"), "road29_1");
        level.add(new Road(eventList, "road29_1"), "road-turn28_1");
        level.add(new Road(eventList, "road-turn28_1"), "road-turn28_2");
        level.add(new Road(eventList, "road-turn28_2"), "road27_2");
        level.add(new Road(eventList, "road27_2"), "road26_2");
        level.add(new Road(eventList, "road26_2"), "road25_2");
        level.add(new Road(eventList, "road25_2"), "road24_2");
        level.add(new Road(eventList, "road24_2"), "t-intersection23_2");
        level.add(new Road(eventList, "t-intersection23_2"), new String[]{"crosswalk22_2", "trafficlight23_3"});
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight23_3"), "road23_4");
        level.add(new Road(eventList, "road23_4"), "roundabout-entrance23_5");
        level.add(new Road(eventList, "road-turn24_4"), "road25_4");
        level.add(new Road(eventList, "road-turn25_6"), "road25_7");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk22_2"), "road21_2");
        level.add(new Road(eventList, "road21_2"), "goal20_2");
        level.add(new Goal(eventList, "goal20_2"));
        level.add(new Road(eventList, "road25_4"), "road26_4");
        level.add(new Road(eventList, "road26_4"), "road27_4");
        level.add(new Road(eventList, "road27_4"), "trafficlight28_4");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "trafficlight28_4"), "road-turn29_4");
        level.add(new Road(eventList, "road-turn29_4"), "goal29_5");
        level.add(new Goal(eventList, "goal29_5"));
        level.add(new Road(eventList, "road25_7"), "road25_8");
        level.add(new Road(eventList, "road25_8"), "road25_9");
        level.add(new Road(eventList, "road25_9"), "road-turn25_10");
        level.add(new Road(eventList, "road-turn25_10"), "crosswalk26_10");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk26_10"), "road27_10");
        level.add(new Road(eventList, "road27_10"), "crosswalk28_10");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk28_10"), "road29_10");
        level.add(new Road(eventList, "road29_10"), "goal30_10");
        level.add(new Goal(eventList, "goal30_10"));
        level.add(new Road(eventList, "road-turn19_-9"), "t-intersection20_-9");
        level.add(new Roundabout(eventList, "roundabout-entrance15_5"), "roundabout-r-road15_6");
        level.add(new Roundabout(eventList, "roundabout-r-road15_6"), "roundabout-r-road16_6");
        level.add(new Roundabout(eventList, "roundabout-r-road16_6"), new String[]{"roundabout16_5", "road17_6"});
        level.add(new Roundabout(eventList, "roundabout16_5"), "roundabout-entrance15_5");
        level.add(new Roundabout(eventList, "roundabout-double19_-4"), new String[]{"roundabout-r-road19_-5", "road20_-4"});
        level.add(new Roundabout(eventList, "roundabout18_-4"), "roundabout-double19_-4");
        level.add(new Roundabout(eventList, "roundabout-entrance18_-5"), "roundabout18_-4");
        level.add(new Roundabout(eventList, "roundabout-r-road19_-5"), new String[]{"roundabout-entrance18_-5", "road19_-6"});
        level.add(new Roundabout(eventList, "roundabout-entrance29_-3"), "roundabout-r-road30_-3");
        level.add(new Roundabout(eventList, "roundabout-r-road30_-3"), new String[]{"roundabout30_-4", "road31_-3"});
        level.add(new Roundabout(eventList, "roundabout30_-4"), "roundabout-entrance29_-4");
        level.add(new Roundabout(eventList, "roundabout-entrance29_-4"), "roundabout-entrance29_-3");
        level.add(new Roundabout(eventList, "roundabout-entrance23_5"), "roundabout-entrance23_6");
        level.add(new Roundabout(eventList, "roundabout-entrance23_6"), "roundabout-r-road24_6");
        level.add(new Roundabout(eventList, "roundabout-r-road24_6"), new String[]{"roundabout-r-road24_5", "road-turn25_6"});
        level.add(new Roundabout(eventList, "roundabout-r-road24_5"), new String[]{"roundabout-entrance23_5", "road-turn24_4"});
        level.add(new Road(eventList, "t-intersection23_-4"), "road-turn23_-3");
        level.add(new Road(eventList, "road23_-5"), "t-intersection23_-4");
        level.add(new Road(eventList, "road23_-6"), "road23_-5");
        level.add(new Road(eventList, "road23_-7"), "road23_-6");
        level.add(new Road(eventList, "road23_-8"), "road23_-7");
        level.add(new Road(eventList, "road28_-3"), "roundabout-entrance29_-3");

        controller.render(level, "start0_0", 0, 0, "start");
        controller.render(level, "road1_0", 1, 0, "left");
        controller.render(level, "road2_0", 2, 0, "left");
        controller.render(level, "crosswalk3_0", 3, 0, "right");
        controller.render(level, "t-intersection4_0", 4, 0, "t-intersection-left");
        controller.render(level, "road-turn4_1", 4, 1, "right-turn");
        controller.render(level, "road4_-1", 4, -1, "top");
        controller.render(level, "road4_-2", 4, -2, "top");
        controller.render(level, "road5_1", 5, 1, "right");
        controller.render(level, "road6_1", 6, 1, "right");
        controller.render(level, "road7_1", 7, 1, "right");
        controller.render(level, "trafficlight8_1", 8, 1, "right");
        controller.render(level, "road-turn4_-3", 4, -3, "bottom-turn");
        controller.render(level, "road5_-3", 5, -3, "left");
        controller.render(level, "road6_-3", 6, -3, "left");
        controller.render(level, "road7_-3", 7, -3, "left");
        controller.render(level, "crosswalk8_-3", 8, -3, "right");
        controller.render(level, "road-turn9_1", 9, 1, "left-turn");
        controller.render(level, "t-intersection9_2", 9, 2, "t-intersection-right");
        controller.render(level, "road9_3", 9, 3, "bottom");
        controller.render(level, "road9_4", 9, 4, "bottom");
        controller.render(level, "road9_5", 9, 5, "bottom");
        controller.render(level, "road9_6", 9, 6, "bottom");
        controller.render(level, "road9_7", 9, 7, "bottom");
        controller.render(level, "road10_2", 10, 2, "left");
        controller.render(level, "road11_2", 11, 2, "left");
        controller.render(level, "road12_2", 12, 2, "left");
        controller.render(level, "road13_2", 13, 2, "left");
        controller.render(level, "t-intersection14_2", 14, 2, "t-intersection-top");
        controller.render(level, "road9_-3", 9, -3, "left");
        controller.render(level, "road10_-3", 10, -3, "left");
        controller.render(level, "road11_-3", 11, -3, "left");
        controller.render(level, "road12_-3", 12, -3, "left");
        controller.render(level, "road13_-3", 13, -3, "left");
        controller.render(level, "t-intersection14_-3", 14, -3, "t-intersection-bottom");
        controller.render(level, "road14_-2", 14, -2, "bottom");
        controller.render(level, "road14_-1", 14, -1, "bottom");
        controller.render(level, "road14_0", 14, 0, "bottom");
        controller.render(level, "road14_1", 14, 1, "top");
        controller.render(level, "road-turn15_-3", 15, -3, "top-turn");
        controller.render(level, "trafficlight15_-4", 15, -4, "top");
        controller.render(level, "road-turn18_-6", 18, -6, "left-turn");
        controller.render(level, "road17_-6", 17, -6, "left");
        controller.render(level, "road16_-6", 16, -6, "left");
        controller.render(level, "road-turn15_-6", 15, -6, "bottom-turn");
        controller.render(level, "road15_-5", 15, -5, "top");
        controller.render(level, "t-intersection15_2", 15, 2, "t-intersection-bottom");
        controller.render(level, "trafficlight16_2", 16, 2, "right");
        controller.render(level, "road17_2", 17, 2, "right");
        controller.render(level, "road-turn18_2", 18, 2, "top-turn");
        controller.render(level, "road18_1", 18, 1, "top");
        controller.render(level, "road18_0", 18, 0, "top");
        controller.render(level, "road18_-1", 18, -1, "top");
        controller.render(level, "road-turn18_-2", 18, -2, "bottom-turn");
        controller.render(level, "road-turn19_-2", 19, -2, "top-turn");
        controller.render(level, "road19_-3", 19, -3, "top");
        controller.render(level, "road20_-4", 20, -4, "right");
        controller.render(level, "road19_-6", 19, -6, "bottom");
        controller.render(level, "crosswalk9_8", 9, 8, "bottom");
        controller.render(level, "road-turn9_9", 9, 9, "right-turn");
        controller.render(level, "road10_9", 10, 9, "right");
        controller.render(level, "road11_9", 11, 9, "right");
        controller.render(level, "road12_9", 12, 9, "right");
        controller.render(level, "road13_9", 13, 9, "right");
        controller.render(level, "road14_9", 14, 9, "right");
        controller.render(level, "trafficlight15_3", 15, 3, "bottom");
        controller.render(level, "road15_4", 15, 4, "bottom");
        controller.render(level, "road-turn15_9", 15, 9, "top-turn");
        controller.render(level, "trafficlight15_8", 15, 8, "top");
        controller.render(level, "road15_7", 15, 7, "bottom");
        controller.render(level, "road17_6", 17, 6, "left");
        controller.render(level, "road18_6", 18, 6, "left");
        controller.render(level, "road19_6", 19, 6, "left");
        controller.render(level, "crosswalk20_6", 20, 6, "right");
        controller.render(level, "road21_6", 21, 6, "right");
        controller.render(level, "road22_6", 22, 6, "left");
        controller.render(level, "road19_-7", 19, -7, "bottom");
        controller.render(level, "road21_-4", 21, -4, "left");
        controller.render(level, "crosswalk19_-8", 19, -8, "top");
        controller.render(level, "crosswalk22_-4", 22, -4, "right");
        controller.render(level, "t-intersection20_-9", 20, -9, "t-intersection-top");
        controller.render(level, "road21_-9", 21, -9, "right");
        controller.render(level, "road22_-9", 22, -9, "right");
        controller.render(level, "t-intersection23_-9", 23, -9, "t-intersection-left");
        controller.render(level, "road-turn23_-3", 23, -3, "right-turn");
        controller.render(level, "road-turn20_-10", 20, -10, "left-turn");
        controller.render(level, "road-turn23_-10", 23, -10, "bottom-turn");
        controller.render(level, "road24_-10", 24, -10, "right");
        controller.render(level, "road25_-10", 25, -10, "left");
        controller.render(level, "road26_-10", 26, -10, "right");
        controller.render(level, "road27_-10", 27, -10, "right");
        controller.render(level, "trafficlight28_-10", 28, -10, "right");
        controller.render(level, "road-turn19_-10", 19, -10, "right-turn");
        controller.render(level, "road-turn19_-11", 19, -11, "left-turn");
        controller.render(level, "road-turn18_-11", 18, -11, "right-turn");
        controller.render(level, "road-turn18_-12", 18, -12, "left-turn");
        controller.render(level, "road-turn17_-12", 17, -12, "right-turn");
        controller.render(level, "road-turn17_-13", 17, -13, "left-turn");
        controller.render(level, "goal16_-13", 16, -13, "goal");
        controller.render(level, "road24_-3", 24, -3, "left");
        controller.render(level, "crosswalk25_-3", 25, -3, "right");
        controller.render(level, "road26_-3", 26, -3, "right");
        controller.render(level, "road27_-3", 27, -3, "right");
        controller.render(level, "t-intersection29_-10", 29, -10, "t-intersection-left");
        controller.render(level, "road29_-9", 29, -9, "bottom");
        controller.render(level, "road29_-8", 29, -8, "bottom");
        controller.render(level, "road29_-7", 29, -7, "bottom");
        controller.render(level, "road-turn29_-11", 29, -11, "bottom-turn");
        controller.render(level, "road30_-11", 30, -11, "right");
        controller.render(level, "road31_-11", 31, -11, "right");
        controller.render(level, "crosswalk32_-11", 32, -11, "right");
        controller.render(level, "road33_-11", 33, -11, "right");
        controller.render(level, "road34_-11", 34, -11, "right");
        controller.render(level, "goal35_-11", 35, -11, "goal");
        controller.render(level, "crosswalk29_-6", 29, -6, "bottom");
        controller.render(level, "road29_-5", 29, -5, "bottom");
        controller.render(level, "road31_-3", 31, -3, "left");
        controller.render(level, "crosswalk32_-3", 32, -3, "right");
        controller.render(level, "t-intersection33_-3", 33, -3, "t-intersection-left");
        controller.render(level, "road33_-2", 33, -2, "top");
        controller.render(level, "road33_-4", 33, -4, "top");
        controller.render(level, "road33_-5", 33, -5, "top");
        controller.render(level, "road33_-6", 33, -6, "top");
        controller.render(level, "road33_-1", 33, -1, "top");
        controller.render(level, "road33_0", 33, 0, "top");
        controller.render(level, "road-turn33_-7", 33, -7, "bottom-turn");
        controller.render(level, "goal34_-7", 34, -7, "goal");
        controller.render(level, "road-turn33_1", 33, 1, "top-turn");
        controller.render(level, "crosswalk32_1", 32, 1, "left");
        controller.render(level, "road31_1", 31, 1, "left");
        controller.render(level, "road30_1", 30, 1, "left");
        controller.render(level, "road29_1", 29, 1, "left");
        controller.render(level, "road-turn28_1", 28, 1, "bottom-turn");
        controller.render(level, "road-turn28_2", 28, 2, "top-turn");
        controller.render(level, "road27_2", 27, 2, "left");
        controller.render(level, "road26_2", 26, 2, "left");
        controller.render(level, "road25_2", 25, 2, "left");
        controller.render(level, "road24_2", 24, 2, "left");
        controller.render(level, "t-intersection23_2", 23, 2, "t-intersection-bottom");
        controller.render(level, "trafficlight23_3", 23, 3, "bottom");
        controller.render(level, "road23_4", 23, 4, "bottom");
        controller.render(level, "road-turn24_4", 24, 4, "bottom-turn");
        controller.render(level, "road-turn25_6", 25, 6, "left-turn");
        controller.render(level, "crosswalk22_2", 22, 2, "left");
        controller.render(level, "road21_2", 21, 2, "left");
        controller.render(level, "goal20_2", 20, 2, "goal");
        controller.render(level, "road25_4", 25, 4, "left");
        controller.render(level, "road26_4", 26, 4, "left");
        controller.render(level, "road27_4", 27, 4, "left");
        controller.render(level, "trafficlight28_4", 28, 4, "right");
        controller.render(level, "road-turn29_4", 29, 4, "left-turn");
        controller.render(level, "goal29_5", 29, 5, "goal");
        controller.render(level, "road25_7", 25, 7, "top");
        controller.render(level, "road25_8", 25, 8, "top");
        controller.render(level, "road25_9", 25, 9, "top");
        controller.render(level, "road-turn25_10", 25, 10, "right-turn");
        controller.render(level, "crosswalk26_10", 26, 10, "right");
        controller.render(level, "road27_10", 27, 10, "right");
        controller.render(level, "crosswalk28_10", 28, 10, "right");
        controller.render(level, "road29_10", 29, 10, "right");
        controller.render(level, "goal30_10", 30, 10, "goal");
        controller.render(level, "road-turn19_-9", 19, -9, "bottom-turn");
        controller.render(level, "roundabout-entrance15_5", 15, 5, "bottom-r-entrance");
        controller.render(level, "roundabout-r-road15_6", 15, 6, "right-r-road");
        controller.render(level, "roundabout-r-road16_6", 16, 6, "top-r-road");
        controller.render(level, "roundabout16_5", 16, 5, "left");
        controller.render(level, "roundabout-double19_-4", 19, -4, "top-double");
        controller.render(level, "roundabout18_-4", 18, -4, "right");
        controller.render(level, "roundabout-entrance18_-5", 18, -5, "bottom-r-entrance");
        controller.render(level, "roundabout-r-road19_-5", 19, -5, "left-r-road");
        controller.render(level, "roundabout-entrance29_-3", 29, -3, "right-r-entrance");
        controller.render(level, "roundabout-r-road30_-3", 30, -3, "top-r-road");
        controller.render(level, "roundabout30_-4", 30, -4, "left");
        controller.render(level, "roundabout-entrance29_-4", 29, -4, "bottom-r-entrance");
        controller.render(level, "roundabout-entrance23_5", 23, 5, "bottom-r-entrance");
        controller.render(level, "roundabout-entrance23_6", 23, 6, "right-r-entrance");
        controller.render(level, "roundabout-r-road24_6", 24, 6, "top-r-road");
        controller.render(level, "roundabout-r-road24_5", 24, 5, "left-r-road");
        controller.render(level, "t-intersection23_-4", 23, -4, "t-intersection-left");
        controller.render(level, "road23_-5", 23, -5, "top");
        controller.render(level, "road23_-6", 23, -6, "top");
        controller.render(level, "road23_-7", 23, -7, "top");
        controller.render(level, "road23_-8", 23, -8, "top");
        controller.render(level, "road28_-3", 28, -3, "left");

        return level;
    }

    public Level getLevel10() {
        Level level = new Level("Level 10");

        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start7_6", 7, 6), "start7_6");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start12_6", 12, 6), "start12_6");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start5_4", 5, 4), "start5_4");
        level.arrival(new ArrivalProcess(new Normal(5, 5), eventList, "ARR-start10_8", 10, 8), "start10_8");

        level.add(new Roundabout(eventList, "roundabout-entrance10_4"), "roundabout-entrance10_3");
        level.add(new Roundabout(eventList, "roundabout-entrance9_4"), "roundabout-entrance10_4");
        level.add(new Roundabout(eventList, "roundabout-entrance9_3"), new String[]{"roundabout-entrance9_4", "road-turn9_2"});
        level.add(new Roundabout(eventList, "roundabout-entrance10_3"), new String[]{"roundabout-entrance9_3", "road-turn11_3"});
        level.add(new Road(eventList, "road-turn11_3"), "t-intersection11_4");
        level.add(new Road(eventList, "road-turn10_5"), "roundabout-entrance10_4");
        level.add(new Road(eventList, "road-turn8_4"), "roundabout-entrance9_4");
        level.add(new Road(eventList, "road-turn9_2"), "t-intersection10_2");
        level.add(new Road(eventList, "t-intersection10_2"), new String[]{"road-turn11_2", "t-intersection10_1"});
        level.add(new Road(eventList, "t-intersection11_4"), new String[]{"road-turn11_5", "t-intersection12_4"});
        level.add(new Road(eventList, "t-intersection9_5"), "road-turn10_5");
        level.add(new Road(eventList, "t-intersection8_3"), "road-turn8_4");
        level.add(new Road(eventList, "t-intersection10_1"), "t-intersection9_1");
        level.add(new Road(eventList, "t-intersection12_4"), "t-intersection12_3");
        level.add(new Road(eventList, "t-intersection7_3"), new String[]{"road-turn7_2", "t-intersection8_3"});
        level.add(new Road(eventList, "road-turn8_2"), "t-intersection8_3");
        level.add(new Road(eventList, "road-turn11_2"), "road-turn11_1");
        level.add(new Road(eventList, "t-intersection10_6"), "t-intersection9_6");
        level.add(new Road(eventList, "t-intersection7_4"), "t-intersection7_3");
        level.add(new Road(eventList, "t-intersection9_1"), new String[]{"traffic-lights8_1", "road-turn9_0"});
        level.add(new Road(eventList, "t-intersection12_3"), new String[]{"traffic-lights12_2", "road-turn13_3"});
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk11_6"), "t-intersection10_6");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk7_5"), "t-intersection7_4");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "traffic-lights8_1"), "goal7_1");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "traffic-lights12_2"), "goal12_1");
        level.add(new Road(eventList, "road-turn11_1"), "t-intersection10_1");
        level.add(new Road(eventList, "road-turn7_2"), "road-turn8_2");
        level.add(new Road(eventList, "road-turn12_5"), "t-intersection12_4");
        level.add(new Road(eventList, "t-intersection9_6"), new String[]{"road-turn8_6", "t-intersection9_5"});
        level.add(new Road(eventList, "road-turn8_6"), "road-turn8_5");
        level.add(new Road(eventList, "road-turn8_5"), "t-intersection9_5");
        level.add(new Goal(eventList, "goal12_1"));
        level.add(new Goal(eventList, "goal7_1"));
        level.add(new Road(eventList, "start7_6"), "crosswalk7_5");
        level.add(new Road(eventList, "start12_6"), "crosswalk11_6");
        level.add(new Road(eventList, "road-turn11_5"), "road-turn12_5");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk10_7"), "t-intersection10_6");
        level.add(new Crosswalk(5, 5, 10, 10, eventList, "crosswalk6_4"), "t-intersection7_4");
        level.add(new Road(eventList, "start5_4"), "crosswalk6_4");
        level.add(new Road(eventList, "start10_8"), "crosswalk10_7");
        level.add(new Road(eventList, "road-turn13_3"), "traffic-lights13_2");
        level.add(new Road(eventList, "road-turn9_0"), "traffic-lights8_0");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "traffic-lights8_0"), "road-turn7_0");
        level.add(new TrafficLights(20, 5, 10, 5, eventList, "traffic-lights13_2"), "road-turn13_1");
        level.add(new Road(eventList, "road-turn13_1"), "goal12_1");
        level.add(new Road(eventList, "road-turn7_0"), "goal7_1");

        controller.render(level, "roundabout-entrance10_4", 10, 4, "top-r-entrance");
        controller.render(level, "roundabout-entrance9_4", 9, 4, "right-r-entrance");
        controller.render(level, "roundabout-entrance9_3", 9, 3, "bottom-r-entrance");
        controller.render(level, "roundabout-entrance10_3", 10, 3, "left-r-entrance");
        controller.render(level, "road-turn11_3", 11, 3, "left-turn");
        controller.render(level, "road-turn10_5", 10, 5, "top-turn");
        controller.render(level, "road-turn8_4", 8, 4, "right-turn");
        controller.render(level, "road-turn9_2", 9, 2, "bottom-turn");
        controller.render(level, "t-intersection10_2", 10, 2, "t-intersection-top");
        controller.render(level, "t-intersection11_4", 11, 4, "t-intersection-right");
        controller.render(level, "t-intersection9_5", 9, 5, "t-intersection-bottom");
        controller.render(level, "t-intersection8_3", 8, 3, "t-intersection-left");
        controller.render(level, "t-intersection10_1", 10, 1, "t-intersection-bottom");
        controller.render(level, "t-intersection12_4", 12, 4, "t-intersection-left");
        controller.render(level, "t-intersection7_3", 7, 3, "t-intersection-right");
        controller.render(level, "road-turn8_2", 8, 2, "left-turn");
        controller.render(level, "road-turn11_2", 11, 2, "top-turn");
        controller.render(level, "t-intersection10_6", 10, 6, "t-intersection-bottom");
        controller.render(level, "t-intersection7_4", 7, 4, "t-intersection-left");
        controller.render(level, "t-intersection9_1", 9, 1, "t-intersection-top");
        controller.render(level, "t-intersection12_3", 12, 3, "t-intersection-right");
        controller.render(level, "crosswalk11_6", 11, 6, "left");
        controller.render(level, "crosswalk7_5", 7, 5, "top");
        controller.render(level, "traffic-lights8_1", 8, 1, "left");
        controller.render(level, "traffic-lights12_2", 12, 2, "top");
        controller.render(level, "road-turn11_1", 11, 1, "left-turn");
        controller.render(level, "road-turn7_2", 7, 2, "bottom-turn");
        controller.render(level, "road-turn12_5", 12, 5, "top-turn");
        controller.render(level, "t-intersection9_6", 9, 6, "t-intersection-top");
        controller.render(level, "road-turn8_6", 8, 6, "right-turn");
        controller.render(level, "road-turn8_5", 8, 5, "bottom-turn");
        controller.render(level, "goal12_1", 12, 1, "goal");
        controller.render(level, "goal7_1", 7, 1, "goal");
        controller.render(level, "start7_6", 7, 6, "start");
        controller.render(level, "start12_6", 12, 6, "start");
        controller.render(level, "road-turn11_5", 11, 5, "right-turn");
        controller.render(level, "crosswalk10_7", 10, 7, "top");
        controller.render(level, "crosswalk6_4", 6, 4, "right");
        controller.render(level, "start5_4", 5, 4, "start");
        controller.render(level, "start10_8", 10, 8, "start");
        controller.render(level, "road-turn13_3", 13, 3, "top-turn");
        controller.render(level, "road-turn9_0", 9, 0, "left-turn");
        controller.render(level, "traffic-lights8_0", 8, 0, "left");
        controller.render(level, "traffic-lights13_2", 13, 2, "top");
        controller.render(level, "road-turn13_1", 13, 1, "left-turn");
        controller.render(level, "road-turn7_0", 7, 0, "bottom-turn");


        return level;
    }

    private Level getDrawLevelDemo() {
        Level level = new Level("Draw demo");


        
        return level;
    }
}
